// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ProjectManagerDbContext))]
    partial class ProjectManagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ApplicationMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<int>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("pk_application_messages");

                    b.HasIndex("ApplicationId")
                        .HasDatabaseName("ix_application_messages_application_id");

                    b.ToTable("application_messages", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CalendarSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Login")
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("ServerUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("server_url");

                    b.HasKey("Id")
                        .HasName("pk_calendar_settings");

                    b.ToTable("calendar_settings", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ControlPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_control_points");

                    b.ToTable("control_points", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ControlPointInProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CompanyMark")
                        .HasColumnType("integer")
                        .HasColumnName("company_mark");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean")
                        .HasColumnName("completed");

                    b.Property<Guid?>("ControlPointId")
                        .HasColumnType("uuid")
                        .HasColumnName("control_point_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("UrfuMark")
                        .HasColumnType("integer")
                        .HasColumnName("urfu_mark");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("video_url");

                    b.HasKey("Id")
                        .HasName("pk_control_point_in_projects");

                    b.HasIndex("ControlPointId")
                        .HasDatabaseName("ix_control_point_in_projects_control_point_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_control_point_in_projects_project_id");

                    b.ToTable("control_point_in_projects", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Meeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_finished");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<int?>("ResultMark")
                        .HasColumnType("integer")
                        .HasColumnName("result_mark");

                    b.HasKey("Id")
                        .HasName("pk_meetings");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_meetings_project_id");

                    b.ToTable("meetings", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AcademicYear")
                        .HasColumnType("integer")
                        .HasColumnName("academic_year");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("case_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MeetingUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("meeting_url");

                    b.Property<int>("Semester")
                        .HasColumnType("integer")
                        .HasColumnName("semester");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid?>("TutorId")
                        .HasColumnType("uuid")
                        .HasColumnName("tutor_id");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("CaseId")
                        .HasDatabaseName("ix_projects_case_id");

                    b.HasIndex("TutorId")
                        .HasDatabaseName("ix_projects_tutor_id");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProjectApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("case_id");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint")
                        .HasColumnName("chat_id");

                    b.Property<Guid?>("CurrentQuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("current_question_id");

                    b.Property<Guid?>("NextQuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("next_question_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("TeamTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("team_title");

                    b.Property<string>("TelegramUsername")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("telegram_username");

                    b.HasKey("Id")
                        .HasName("pk_project_applications");

                    b.HasIndex("CaseId")
                        .HasDatabaseName("ix_project_applications_case_id");

                    b.HasIndex("NextQuestionId")
                        .HasDatabaseName("ix_project_applications_next_question_id");

                    b.ToTable("project_applications", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProjectCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AcceptedTeams")
                        .HasColumnType("integer")
                        .HasColumnName("accepted_teams");

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("criteria");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("goal");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("MaxTeams")
                        .HasColumnType("integer")
                        .HasColumnName("max_teams");

                    b.Property<string>("RequestedResult")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("requested_result");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid?>("TutorId")
                        .HasColumnType("uuid")
                        .HasColumnName("tutor_id");

                    b.HasKey("Id")
                        .HasName("pk_project_cases");

                    b.HasIndex("TutorId")
                        .HasDatabaseName("ix_project_cases_tutor_id");

                    b.ToTable("project_cases", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AcademicGroup")
                        .HasColumnType("text")
                        .HasColumnName("academic_group");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text")
                        .HasColumnName("patronymic");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_students");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_students_role_id");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.StudentInProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("pk_student_in_projects");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_student_in_projects_project_id");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_student_in_projects_student_id");

                    b.ToTable("student_in_projects", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.StudentRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_student_roles");

                    b.ToTable("student_roles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TelegramBot.ApplicationQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("MsgText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("msg_text");

                    b.Property<Guid?>("NextQuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("next_question_id");

                    b.Property<Guid?>("PrevQuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("prev_question_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_application_questions");

                    b.HasIndex("NextQuestionId")
                        .HasDatabaseName("ix_application_questions_next_question_id");

                    b.HasIndex("PrevQuestionId")
                        .HasDatabaseName("ix_application_questions_prev_question_id");

                    b.ToTable("application_questions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TelegramBot.ApplicationQuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<string>("QuestionTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question_title");

                    b.HasKey("Id")
                        .HasName("pk_application_question_answers");

                    b.HasIndex("ApplicationId")
                        .HasDatabaseName("ix_application_question_answers_application_id");

                    b.ToTable("application_question_answers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TodoTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uuid")
                        .HasColumnName("meeting_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_todo_tasks");

                    b.HasIndex("MeetingId")
                        .HasDatabaseName("ix_todo_tasks_meeting_id");

                    b.ToTable("todo_tasks", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Tutor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text")
                        .HasColumnName("patronymic");

                    b.HasKey("Id")
                        .HasName("pk_tutors");

                    b.ToTable("tutors", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CalendarSettingsId")
                        .HasColumnType("uuid")
                        .HasColumnName("calendar_settings_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.Property<Guid?>("TutorId")
                        .HasColumnType("uuid")
                        .HasColumnName("tutor_id");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CalendarSettingsId")
                        .HasDatabaseName("ix_users_calendar_settings_id");

                    b.HasIndex("TutorId")
                        .HasDatabaseName("ix_users_tutor_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ApplicationMessage", b =>
                {
                    b.HasOne("Domain.Entities.ProjectApplication", "ProjectApplication")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_messages_project_applications_application_id");

                    b.Navigation("ProjectApplication");
                });

            modelBuilder.Entity("Domain.Entities.ControlPointInProject", b =>
                {
                    b.HasOne("Domain.Entities.ControlPoint", "ControlPoint")
                        .WithMany()
                        .HasForeignKey("ControlPointId")
                        .HasConstraintName("fk_control_point_in_projects_control_points_control_point_id");

                    b.HasOne("Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_control_point_in_projects_projects_project_id");

                    b.Navigation("ControlPoint");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.Meeting", b =>
                {
                    b.HasOne("Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meetings_projects_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.Project", b =>
                {
                    b.HasOne("Domain.Entities.ProjectCase", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_projects_project_cases_case_id");

                    b.HasOne("Domain.Entities.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .HasConstraintName("fk_projects_tutors_tutor_id");

                    b.Navigation("Case");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("Domain.Entities.ProjectApplication", b =>
                {
                    b.HasOne("Domain.Entities.ProjectCase", "ProjectCase")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_applications_project_cases_case_id");

                    b.HasOne("Domain.Entities.TelegramBot.ApplicationQuestion", "CurrentQuestion")
                        .WithMany()
                        .HasForeignKey("NextQuestionId")
                        .HasConstraintName("fk_project_applications_application_questions_next_question_id");

                    b.Navigation("CurrentQuestion");

                    b.Navigation("ProjectCase");
                });

            modelBuilder.Entity("Domain.Entities.ProjectCase", b =>
                {
                    b.HasOne("Domain.Entities.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .HasConstraintName("fk_project_cases_tutors_tutor_id");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.HasOne("Domain.Entities.StudentRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_students_student_roles_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.StudentInProject", b =>
                {
                    b.HasOne("Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_in_projects_projects_project_id");

                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_in_projects_students_student_id");

                    b.Navigation("Project");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.TelegramBot.ApplicationQuestion", b =>
                {
                    b.HasOne("Domain.Entities.TelegramBot.ApplicationQuestion", "NextQuestion")
                        .WithMany()
                        .HasForeignKey("NextQuestionId")
                        .HasConstraintName("fk_application_questions_application_questions_next_question_id");

                    b.HasOne("Domain.Entities.TelegramBot.ApplicationQuestion", "PrevQuestion")
                        .WithMany()
                        .HasForeignKey("PrevQuestionId")
                        .HasConstraintName("fk_application_questions_application_questions_prev_question_id");

                    b.Navigation("NextQuestion");

                    b.Navigation("PrevQuestion");
                });

            modelBuilder.Entity("Domain.Entities.TelegramBot.ApplicationQuestionAnswer", b =>
                {
                    b.HasOne("Domain.Entities.ProjectApplication", "ProjectApplication")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_question_answers_project_applications_applicati");

                    b.Navigation("ProjectApplication");
                });

            modelBuilder.Entity("Domain.Entities.TodoTask", b =>
                {
                    b.HasOne("Domain.Entities.Meeting", "Meeting")
                        .WithMany()
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_todo_tasks_meetings_meeting_id");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.CalendarSettings", "CalendarSettings")
                        .WithMany()
                        .HasForeignKey("CalendarSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_calendar_settings_calendar_settings_id");

                    b.HasOne("Domain.Entities.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .HasConstraintName("fk_users_tutors_tutor_id");

                    b.Navigation("CalendarSettings");

                    b.Navigation("Tutor");
                });
#pragma warning restore 612, 618
        }
    }
}
